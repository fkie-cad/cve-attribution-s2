from enum import Enum

from mongoengine import (BooleanField, Document, EmbeddedDocument,
                         EmbeddedDocumentField, EmbeddedDocumentListField,
                         EnumField, ListField, StringField)

from db.models import cvss


# Holds the CVEs meta data
class CVEDataMeta(EmbeddedDocument):
    ID = StringField(regex=r'^CVE-[0-9]{4}-[0-9]{4,}$')
    ASSIGNER = StringField()
    STATE = StringField()


# A single product version
class VersionData(EmbeddedDocument):
    version_value = StringField(required=True)
    version_affected = StringField()


# Holds all affected versions
class Version(EmbeddedDocument):
    version_data = EmbeddedDocumentListField(VersionData, required=True)


# Product-associated information and all affected versions
class ProductData(EmbeddedDocument):
    product_name = StringField(required=True)
    version = EmbeddedDocumentField(Version, required=True)


# A product
class Product(EmbeddedDocument):
    product_data = EmbeddedDocumentListField(ProductData, required=True)


# The vendor name and its CVE-affected products
class VendorData(EmbeddedDocument):
    vendor_name = StringField(required=True)
    product = EmbeddedDocumentField(Product, required=True)


# Holds vendor information
class Vendor(EmbeddedDocument):
    vendor_data = EmbeddedDocumentListField(VendorData, required=True)


# Holds affected vendors and products
class Affects(EmbeddedDocument):
    vendor = EmbeddedDocumentField(Vendor, required=True)


# A description
class Description(EmbeddedDocument):
    lang = StringField()
    value = StringField()


# Holds problem types and their description
class DescriptionData(EmbeddedDocument):
    description = EmbeddedDocumentListField(Description)


class ProblemType(EmbeddedDocument):
    problemtype_data = EmbeddedDocumentListField(DescriptionData)


class DescriptionContainer(EmbeddedDocument):
    description_data = EmbeddedDocumentListField(Description, required=True)


# A single reference
class ReferenceData(EmbeddedDocument):
    url = StringField(required=True)
    name = StringField()
    refsource = StringField()
    tags = ListField(StringField())


# Holds references that give insight on the vulnerability
class References(EmbeddedDocument):
    reference_data = EmbeddedDocumentListField(ReferenceData)


class DataType(Enum):
    CVE = 'CVE'


class DataFormat(Enum):
    MITRE = 'MITRE'


class DataVersion(Enum):
    V40 = '4.0'


# Holds the primary CVE data
class CVE(EmbeddedDocument):
    data_type = EnumField(DataType, default=DataType.CVE, required=True)
    data_format = EnumField(DataFormat, default=DataFormat.MITRE, required=True)
    data_version = EnumField(DataVersion, default=DataVersion.V40, required=True)
    CVE_data_meta = EmbeddedDocumentField(CVEDataMeta, required=True)
    affects = EmbeddedDocumentField(Affects)
    problemtype = EmbeddedDocumentField(ProblemType, required=True)
    references = EmbeddedDocumentField(References, required=True)
    description = EmbeddedDocumentField(DescriptionContainer, required=True)


# CPE Name
class CPEName(EmbeddedDocument):
    cpe22Uri = StringField()
    cpe23Uri = StringField(required=True)
    lastModifiedDate = StringField()


# CPE match string or range
class CPEMatch(EmbeddedDocument):
    vulnerable = BooleanField(required=True)
    cpe22Uri = StringField()
    cpe23Uri = StringField(required=True)
    versionStartExcluding = StringField()
    versionStartIncluding = StringField()
    versionEndExcluding = StringField()
    versionEndIncluding = StringField()
    cpe_name = EmbeddedDocumentListField(CPEName)


# Defines a node or sub-node in an NVD applicability statement.
class Node(EmbeddedDocument):
    operator = StringField()
    negate = BooleanField()
    children = EmbeddedDocumentListField('Node')
    cpe_match = EmbeddedDocumentListField(CPEMatch)


# Defines the set of product configurations for a NVD applicability statement.
class Configurations(EmbeddedDocument):
    CVE_data_version = StringField(required=True)
    nodes = EmbeddedDocumentListField(Node)
    cpe_match = EmbeddedDocumentListField(CPEMatch)


# Impact scores for a vulnerability as found on NVD.
class Impact(EmbeddedDocument):
    baseMetricV3 = EmbeddedDocumentField(cvss.v3.BaseMetric)
    baseMetricV2 = EmbeddedDocumentField(cvss.v2.BaseMetric)


# Defines a vulnerability in the NVD data feed.
class CVEItem(Document):
    # https://csrc.nist.gov/schema/nvd/feed/1.1/nvd_cve_feed_json_1.1.schema
    cve = EmbeddedDocumentField(CVE, required=True)
    configurations = EmbeddedDocumentField(Configurations)
    impact = EmbeddedDocumentField(Impact)
    publishedDate = StringField()
    lastModifiedDate = StringField()

    meta = {'collection': 'cve'}

    def save(self, **kwargs):
        duplicates = CVEItem.objects(cve__CVE_data_meta__ID=self.cve.CVE_data_meta.ID)
        if len(duplicates) > 0:
            # already exists, get objectid and overwrite
            self.pk = duplicates.first().pk
        super(CVEItem, self).save(**kwargs)
