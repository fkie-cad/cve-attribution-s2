import datetime
import json
import logging

import dateutil.parser
import dateutil.tz
import pymongo
import mongoengine

import util
from db import models
import nvd


logger = logging.getLogger('DB')


def connect(host: str, port: int, username: str, password: str, db: str, authentication_source: str, **kwargs)\
            -> pymongo.MongoClient:
    return mongoengine.connect(
        host=host,
        port=port,
        username=username,
        password=password,
        db=db,
        authentication_source=authentication_source
    )


def feed_unknown(source: nvd.Source) -> bool:
    unknown = len(models.Feed.objects(feedName=source.name)) == 0
    if unknown:
        logger.warning(f'Following feed is unknown in our database:\n{source}')
    return unknown


def feed_modified_delta(source: nvd.Source) -> datetime.timedelta:
    db_obj = models.Feed.objects(feedName=source.name).first()
    db_date = dateutil.parser.isoparse(db_obj.metaData.lastModifiedDate)
    src_date = source.meta['lastModifiedDate']
    return src_date.astimezone(dateutil.tz.UTC) - db_date.astimezone(dateutil.tz.UTC)


def feed_migrate_data(source: nvd.Source):
    data = source.data
    total = len(data['CVE_Items'])
    logger.info(f'Migrating {total} CVEs from {source.name}')
    # for i, cve_dict in enumerate(data['CVE_Items']):
    #     # cve_json = json.dumps(cve_dict, indent=4)
    #     # logger.debug(f'Migrating CVE:\n{cve_json}')
    #     # cve_model = models.CVEItem.from_json(cve_json)
    #     # cve_model.save()
    #     cves.append(cve_dict)
    #     if i % 100 == 0:
    #         logger.info(f'Migration progress ({source.name}): {i + 1}/{total} CVEs')
    bulk = models.CVEItem._get_collection().initialize_ordered_bulk_op()
    for cve in data['CVE_Items']:  # where users is a list of dicts containing data to work on
        bulk.find({"cve.CVE_data_meta.ID": cve['cve']['CVE_data_meta']['ID']}).upsert().replace_one(cve)
    bulk.execute()


    logger.info(f'Migrated {total} CVEs')


def clear():
    logger.warning(f'Clearing \'cve\' collection')
    models.CVEItem.objects().delete()
    logger.warning(f'Clearing \'feed\' collection')
    models.Feed.objects().delete()


def feed_migrate_meta(source: nvd.Source):
    logger.info(f'Migrating updated meta data from {source.name}')
    meta_json = json.dumps(source.meta, indent=4, cls=util.BetterEncoder)
    meta_model = models.feed.Meta.from_json(meta_json)

    feed = models.Feed()
    feed.feedName = source.name
    feed.metaUrl = source.meta_url
    feed.dataUrl = source.data_url
    feed.feedType = source.type.name
    feed.metaData = meta_model

    feed.save()
